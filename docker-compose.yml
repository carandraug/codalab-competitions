version: '2'
services:
  minio:
    image: quay.io/minio/minio
    restart: always
    env_file: .env
    ports: ["9002:9002"]
    command: server --address ":9002" /data
    volumes:
      - /data/minio:/data
    container_name: minio

  # --------------------------------------------------------------------------
  # HTTP Server
  # --------------------------------------------------------------------------
  nginx:
    image: nginx
    restart: always
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}
#      - ${SSL_PORT}:${SSL_PORT}
    command: bash -x /app/docker/run_nginx.sh
    volumes:
#      - ./certs:/app/certs
      - ./docker:/app/docker
      - ./codalab:/app/codalab
      - ${LOGGING_DIR}/nginx:/var/log/nginx/
    env_file: .env
    links:
      - django:django
    logging:
      options:
        max-size: "200k"
    container_name: nginx


  # --------------------------------------------------------------------------
  # Database
  # --------------------------------------------------------------------------
  postgres:
    image: postgres:9.6.3
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./docker:/app/docker
      - ${LOGGING_DIR}/psql:/var/log/psql
      - ${DB_DATA_PATH}:/var/lib/postgresql/data
      - ./backups:/app/backups
    env_file: .env
    logging:
      options:
        max-size: "200k"
    container_name: postgres

  pgbackups:
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - ./docker/postgres:/backups
    links:
      - postgres
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=8087


  # --------------------------------------------------------------------------
  # Message queue
  # --------------------------------------------------------------------------
  rabbit:
    build:
      # Custom Dockerfile for rabbit mostly to make building faster because
      # of envsubst dependency
      context: .
      dockerfile: docker/rabbitmq/Dockerfile
    restart: always
    hostname: rabbit
    command: bash -x /app/docker/run_rabbitmq.sh
    environment:
      - RABBITMQ_LOGS=/var/log/rabbitmq/output.log
      - RABBITMQ_SASL_LOGS=/var/log/rabbitmq/output_sasl.log
    env_file: .env
    volumes:
      - ./docker:/app/docker
      - ./certs:/app/certs
      - ${LOGGING_DIR}/rabbitmq:/var/log/rabbitmq
      - ./var/data/rabbitmq/:/var/lib/rabbitmq/mnesia
    ports:
      - ${RABBITMQ_PORT}:${RABBITMQ_PORT}
      - ${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}
    logging:
      options:
        max-size: "200k"
    container_name: rabbit

  flower:
    build:
      context: .
      dockerfile: docker/flower/Dockerfile
    restart: always
    hostname: flower
    ports:
      - ${FLOWER_PORT}:${FLOWER_PORT}
    environment:
      # These aren't set in .env
      - AMQP_USERNAME=${RABBITMQ_DEFAULT_USER}
      - AMQP_PASSWORD=${RABBITMQ_DEFAULT_PASS}
      - AMQP_HOST=rabbit
      - AMQP_PORT=${RABBITMQ_PORT}
      - FLOWER_CERTFILE=${SSL_CERTIFICATE}
      - FLOWER_KEYFILE=${SSL_CERTIFICATE_KEY}
      - BROKER_USE_SSL=
    volumes:
      - ./certs:/app/certs
    env_file: .env
    links:
      - rabbit
    logging:
      options:
        max-size: "200k"
    container_name: flower


  # --------------------------------------------------------------------------
  # Cache
  # --------------------------------------------------------------------------
  memcached:
    image: memcached
    restart: always
    hostname: memcached
    command: "/usr/local/bin/memcached -u memcache"
    logging:
      options:
        max-size: "200k"
    container_name: memcached


  # --------------------------------------------------------------------------
  # Django
  # --------------------------------------------------------------------------
  django:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    hostname: django
    ports:
      - ${DJANGO_PORT}:${DJANGO_PORT}
    command: bash /app/docker/run_django.sh
    volumes:
      - ./certs:/app/certs
      - ./codalab:/app/codalab
      - ./docker:/app/docker
      - ${LOGGING_DIR}/django:/var/log/django/
      - ./backups:/app/backups
    env_file: .env
    environment:
      - CONFIG_SERVER_NAME=${CODALAB_SITE_DOMAIN}
      - PYTHONUNBUFFERED=1
    links:
      - postgres
      - rabbit
      - memcached
    logging:
      options:
        max-size: "200k"
    container_name: django
    

  # --------------------------------------------------------------------------
  # Celery Workers
  # --------------------------------------------------------------------------
  worker_site:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    command: sh /app/docker/run_site.sh
    volumes:
      - ./codalab:/app/codalab
      - ./docker:/app/docker
      - ${LOGGING_DIR}/worker_site:/var/log/
    environment:
      # Stop memory leaks
      - DEBUG=False
      - REQUESTS_CA_BUNDLE=/usr/local/lib/python3.8/site-packages/certifi/cacert.pem
    env_file: .env
    links:
      - postgres
      - rabbit
    logging:
      options:
        max-size: "200k"
    container_name: worker_site
      
  worker_compute:
    image: codalab/competitions-v1-compute-worker:1.1.7
    restart: always
    privileged: true
    volumes:
      - ${LOGGING_DIR}/worker_compute:/var/log/
      - ${SUBMISSION_TEMP_DIR}:${SUBMISSION_TEMP_DIR}
      - /var/run/docker.sock:/var/run/docker.sock
    env_file: .env
    environment:
      - BROKER_USE_SSL=
    links:
      - rabbit
    logging:
      options:
        max-size: "200k"
    mem_limit: 1g
    memswap_limit: 1g
    container_name: worker_compute
